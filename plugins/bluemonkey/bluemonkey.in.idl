/*!
 * \mainpage Automotive Message Broker Library Documentation - Bluemonkey Plugin
 * \version @PROJECT_VERSION@
 * \section intro Introduction
 * Bluemonkey is a javascript rendering engine that allows the scripting of source plugin behavior in javascript.
 * It allows developers a quick way to prototype plugin code as well as a way to create custom properties.
 * \section properties Properties
 * Bluemonkey uses internal property names (not DBus API interface names).  These properties are defined in
 * lib/vehicleproperty.h.  There are mappings from AMB internal property names to DBus API properties in the
 * <a href="ambdbusmappings_8idl">mappings documentation</a>.  The mappings comes in handy when you want to implement properties that are
 * exported as an DBus API interface (ie, org.automotive.VehicleSpeed).
 * \section example Example bluemonkey script
 * \code
 * var speedProperty = bluemonkey.subscribeTo("VehicleSpeed");
 *
 * var testTimer = bluemonkey.createTimer();
 * testTimer.interval = 3000;
 * testTimer.singleShot = false;
 * testTimer.timeout.connect(function() {
 *   //VehicleSpeed
 *   speedProperty.value = Math.floor((Math.random() * 100) + 1);
 * });
 * testTimer.start();
 * \endcode
 * \section Javascript API documentation
 * Javascript API documentation is found in bluemonkey.idl and is described using WebIDL.  Plugin configuration documentation can be found in bluemonkey.README.
 */

 /*!
 * \name @PROJECT_NAME@ Bluemonkey interface documentation
 * \version @PROJECT_VERSION@
 * \brief the bluemonkey script engine is powered by Qt QML's javascript engine.  It supports QObject types as well
 * as ECMA script (javascript).  All QObject properties, slots, and signals are available in javascript.
 * \see Qt's QMetaObject system for additional details
 */

/*!
 * \brief Entry point for bluemonkey
 */
partial interface Navigator {
	readonly attribute Bluemonkey bluemonkey;
};

/*!
 * \brief Bluemonkey interface
 * Bluemonkey provides AMB plugin-like interfaces and allows the loading of other modules, timers, and QObject creation.
 * Typical usage is such:
 * \code
 * var speedProperty = bluemonkey.subscribeTo("VehicleSpeed");
 * bluemonkey.log("Current speed: " + speedProperty.value);
 * \endcode
 */
interface Bluemonkey {
	/*!
	 * \brief subscribe to a property
	 * \returns PropertyInterface representing the property
	 */
	PropertyInterface subscribeTo(DOMString propertyName, optional unsigned short zone, optional DOMString source);

	/*!
	 * \brief return the AMB sources that provide propertyName
	 */
	DOMString[] sourcesForProperty(DOMString propertyName);

	/*!
	 * \brief returns the available zones that contians propertyName
	 */
	unsigned short[] zonesForProperty(DOMString propertyName);

	/*!
	 * \brief return supported properties
	 */
	DOMString[] supportedProperties();

	/*!
	 * \brief load another script
	 */
	void loadConfig(DOMString configFile);

	/*!
	 * \brief load a bluemonkey module
	 */
	void loadModule(DOMString moduleFile);

	/*!
	 * \brief log text to AMB output
	 */
	void log(DOMString text);

	/*!
	 * \brief createTimer
	 * \return QTimer object
	 */
	QTimer createTimer();

	/*!
	 * \brief createQObject
	 * \return empty QObject
	 */
	QObject createQObject();

	/*!
	 * \brief return logged data between "begin" and "end"
	 */
	 void getHistory(DOMString[] properties, Date begin, Date end, HistoryCallback callback);

	/*!
	 * \brief createCustomProperty
	 */
	 void createCustomProperty(DOMString name, any value, optional unsigned short zone);

	/*!
	 * \brief exportInterface
	 */
	 void exportInterface(DOMString interfaceName, ExportMap[] properties);

};

interface PropertyInterface {
	/*!
	 * \brief AMB property name of this property
	 */
	readonly attribute DOMString type;

	/*!
	 * \brief zone for this property
	 */
	readonly attribute unsigned short zone;

	/*!
	 * \brief value for this property
	 */
	readonly attribute any value;

	/*!
	 * \brief source where this property came from
	 */
	readonly attribute DOMString source;

	/*!
	 * \brief timestamp when property was last updated
	 */
	readonly attribute DOMTimestamp timestamp;

	/*!
	 * \brief changed signal
	 */
	readonly attribute Signal changed;

	void getHistory(Date begin, Date end, HistoryCallback callback);
};

interface Signal {
	/*!
	 * \brief connect function.
	 * Use to connect to signals
	 */
	 void connect(ChangedCallback callback)
};

interface ExportMap {
	 /*!
	  * \brief internal AMB property name
	  */
	 attribute DOMString AmbPropertyName;

	 /*!
	  * \brief name you want to export as a DBus property
	  */
	 attribute DOMString DBusPropertyName;
}

callback ChangedCallback = void(any value); ();

callback HistoryCallback = void(PropertyInterface[] data); ();

