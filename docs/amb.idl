/*! amb.idl
* /brief This document describes the DBus interfaces and data types for the
* Automotive Message Broker API.  The data types are intended to as-close-as-
* possible be compatible with the W3C vehicle <a href="https://rawgit.com/w3c/automotive-bg/master/data_spec.html>data spec</a>.
*/

/*!
* Variant
*/
union Variant {
  UInt8 uint8
  Int8 int8
  UInt16 uint16
  Int16 int16
  UInt32 uint32
  Int32 int32
  UInt32 uin32
  Int64 int64
  UInt64 uint64
  Boolean boolean
  Float float
  Double double
  String string
  ByteBuffer bytebuffer
}

/*!
* Dictionary
*/
map Dictionary {
  String to Variant
}

/*!
* VehiclePropertyType
* \brief VehiclePropertyType is the base class for all Data types.
*/
interface VehiclePropertyType {

  /*!
  * \brief time stamp marking the last time a property in the interface updated
  */
  attribute Double Time readonly

  /*!
  * \brief Zone in which the interface is situated.
  */
  attribute Zone Zone readonly

  /*!
  * \brief returns dictionary of objectName and values for data between
  * 'beginTime' and 'endTime'
  * \arg beginTime time stamp in Seconds since Unix Epoc
  * \arg endTime time stamp in Seconds since Unix Epoc
  */
  method GetHistory(Double beginTime, Double endTime) {
    out{ Dictionary result}
  }
}

enumeration Zone {
  None = 0,
  Front = 1,
  Middle = 1 << 1,
  Right = 1 << 2,
  Left = 1 << 3,
  Rear = 1 << 4,
  Center = 1 << 5
}

/*! org.automotive.Manager
 * \brief Manager is a helper interface for discovering and finding available objects
 * Manager is a helper interface that helps inform of supported data types and find
 * specified data type objects' path on DBus
 * DBus Path: /
 */
interface org.automotive.Manager  {

  /*! List
   *  \brief returns supported properties
  */
  method List {
    out { String[] }
  }

  /*!
   * FindObject
   *  \brief find the DBus object path matching the given "objectName" (ie "VehicleSpeed" is the object name for
   * the DBus object at path: "/path/to/VehicleSpeed") or org.automotive.Manager.ObjectNotFound if the object
   * name is not supported.
   *
   *  If the object path does not exist, it will be created.  The object path will be removed
   *  when the last proccess that calls Find* disconnects from DBus.
   *
   *  \arg String objectName to find
   *  \returns list of object paths that provide the given object Name.
  */
  method FindObject {
    in {
      String objectName
    }
    out {
      String[] objectPaths
    }
  }

  /*!
   * FindObjectForZone
   *  \brief find the DBus object path which matches "objectName" and "zone".  This has the same behavior as FindObject
   * except that it takes an addition zone argument and only returns the path for that zone.
   *  \arg String property is the requested property to be retrieved.
   *  \arg Zone zone is the zone which the object
   *  \returns string representing the DBus Object path
  */
  method FindObjectForZone {
    in {
      String objectName
      Zone zone
    }
    out {
      String objectPath
    }
  }

  /*!
   * ZonesForObjectName
   *  \brief get a list of zones for a given objectName.
   *  \arg String objectName object name.
   *  \returns list of zones for the given objectName (@see Zone)
  */
  method ZonesForObjectName {
    in {
      String objectName
    }
    out {
      UInt32[] zones
    }
  }

}

/*! org.automotive.VehicleSpeed
 \brief contains information about VehicleSpeed
 DBus Path: variable
*/
interface org.automotive.VehicleSpeed extends VehiclePropertyType  {

  /*!  Speed
   *   \brief  Must return Vehicle Speed in kilometers per hour.
   */
  attribute UInt16 Speed readonly
}

/*! org.automotive.EngineSpeed
 \brief contains information about EngineSpeed
 DBus Path: variable
*/
interface org.automotive.EngineSpeed extends VehiclePropertyType  {

  /*!  EngineSpeed
   *   \brief  Must return Engine Speed in rotations per minute.
   */
   attribute UInt16 Speed readonly
}

enumeration PowerMode {
  Off = 0
  Accessory1 = 1
  Accessory2 = 2
  Run = 3
}

interface org.automotive.VehiclePowerMode extends VehiclePropertyType  {

  /*!  VehiclePowerMode
   *   \brief  Must return vehicle power mode
   */
  attribute PowerMode VehiclePowerMode readonly
}

/*! org.automotive.TripMeter
 \brief contains information about TripMeter
 DBus Path: variable
*/
interface org.automotive.TripMeter extends VehiclePropertyType  {

  /*!  TripMeters
   *   \brief  Must return trip meters.  Changing any items in the array will reset the item's value to '0'.
   */
   attribute UInt16[] TripMeters
}

/*! org.automotive.Acceleration
 \brief contains information about Acceleration
 DBus Path: variable
*/
interface org.automotive.Acceleration extends VehiclePropertyType  {

  /*!  X
   *   \brief  Must return acceleration on the "X" axis as 1/1000 G (gravitational force).
   */
  attribute UInt16 X readonly

  /*!  Y
   *   \brief  Must return acceleration on the "Y" axis as 1/1000 G (gravitational force).
   */
  attribute UInt16 Y readonly

  /*!  Z
   *   \brief  Must return acceleration on the "Z" axis as 1/1000 G (gravitational force).
   */
  attribute UInt16 Z readonly
}

enumeration TransmissionMode {
  park = "park",
  reverse = "reverse",
  neutral = "neutral",
  low = "low",
  drive = "drive",
  overdrive = "overdrive"
}

/*! TransmissionPosition
 * \brief Describes Transmission Pistion.  Deprecated.  Will disappear in 0.13
 */
enumeration TransmissionPosition {
  Neutral = 0,
  First = 1,
  Second = 2,
  Third = 3,
  Fourth = 4,
  Fifth = 5,
  Sixth = 6,
  Seventh = 7,
  Eighth = 8,
  Ninth = 9,
  Tenth = 10,
  Cvt = 64,
  Reverse = 128,
  Park = 255
}

/*! TransmissionGearType
 * \brief Describes the transmission gearbox type
*/
enumeration TransmissionGearType
{
  Auto = 0,
  Manual = 1,
  CVT = 2
}

interface org.automotive.Transmission extends VehiclePropertyType  {
  /*!  GearPosition
   *   \brief  Must return transmission gear position (see TRANSMISSIONPOSITION) Deprecated.  Replaced with Gear
   */
   attribute TransmissionPosition GearPosition readonly

  /*!  TransmissionGearType
   *   \brief MUST return transmission gear type of either Automatic, Manual or Constant Variable (CV).
   *   See TRANSMISSIONGEARTYPE
   */
   attribute TransmissionGearType Type;

  /*!  Gear
   *   \brief  Must return transmission gear position 1-10
   */
   attribute UInt8 Gear readonly

  /*!  Mode
   *   \brief  Must return transmission Mode
   */
   attribute TransmissionMode Mode readonly
}


interface org.automotive.CruiseControlStatus extends VehiclePropertyType  {

  /*!  Activated
   *   \brief  Must return whether or not the Cruise Control system is active (true) or inactive (false)
   */
   attribute Boolean Activated readonly

  /*!  Speed
   *   \brief  Must return target Cruise Control speed in kilometers per hour (kph).
   */
   attribute UInt16 Speed readonly
}

/*!
 * Deprecated.  Use BrakeOperation.  Remove in 0.13
 */
interface org.automotive.WheelBrake extends VehiclePropertyType  {

  /*!  Engaged
   *   \brief  Must return Wheel Brake status: Engaged = true, disengaged = false
   */
   attribute Boolean Engaged readonly
}

interface org.automotive.BrakeOperation extends VehiclePropertyType  {

  /*!  BrakePedalDepressed
   *   \brief  must return whether brake pedal is depressed or not. true: brake pedal is depressed, false: brake pedal is not depressed
   */
   attribute Boolean BrakePedalDepressed readonly
}

interface org.automotive.LightStatus extends VehiclePropertyType  {

  /*!  Head
   *   \brief  Must return headlight status: on = true, off = false.
   */
   attribute Boolean Head readonly

  /*!  RightTurn
   *   \brief  Must return right turn signal status: on = true, off = false.
   */
   attribute Boolean RightTurn readonly

  /*!  LeftTurn
   *   \brief  Must return left turn signal status: on = true, off = false.
   */
   attribute Boolean LeftTurn readonly

  /*!  Brake
   *   \brief  Must return  brake signal light status: on = true, off = false.
   */
   attribute Boolean Brake readonly

  /*!  Fog
   *   \brief  Must return fog light status: on = true, off = false.
   */
   attribute Boolean Fog readonly

  /*!  Hazard
   *   \brief  Must return hazard light status: on = true, off = false.
   */
   attribute Boolean Hazard readonly

  /*!  Parking
   *   \brief  Must return parking light status: on = true, off = false.
   */
   attribute Boolean Parking readonly

  /*!  HighBeam
   *   \brief  Must return high beam status: on = true, off = false.
   */
   attribute Boolean HighBeam readonly

  /*!  AutomaticHeadlights
   *   \brief  Must return automatic headlight status: on = true, off = false.
   */
  attribute Boolean AutomaticHeadlights readonly

  /*!  DynamicHighBeam
   *   \brief  Must return dynamic high beam status: on = true, off = false.
   */
  attribute Boolean DynamicHighBeam readonly
}


interface org.automotive.InteriorLightStatus extends VehiclePropertyType  {

  /*!  Passenger
   *   \brief  Must return passenger interior light status: on = true, off = false
   */
   attribute Boolean Passenger readonly

  /*!  Driver
   *   \brief  Must return driver interior light status: on = true, off = false
   */
   attribute Boolean Driver readonly

  /*!  Center
   *   \brief  Must return center interior light status: on = true, off = false
   */
   attribute Boolean Center readonly
}


interface org.automotive.Horn extends VehiclePropertyType  {

  /*!  On
   *   \brief  Must return horn status: on = true, off = false
   */
   attribute Boolean On readonly
}


interface org.automotive.Fuel extends VehiclePropertyType  {

  /*!  Level
   *   \brief  Must return fuel level as a percentage of fullness.
   */
   attribute UInt16 Level readonly

  /*!  Range
   *   \brief  Must return estimated fuel range in meters.
   */
   attribute UInt32 Range readonly

  /*!  InstantConsumption
   *   \brief  Must return instant fuel consumption in per distance travelled (Unit: milliliters per 100 kilometers).
   */
   attribute UInt32 InstantConsumption readonly

  /*!  InstantEconomy
   *   \brief  Must return instant fuel 'economy' in kilometers per liter of fuel.
   */
   attribute UInt16 InstantEconomy readonly

  /*!  AverageEconomy
   *   \brief  Must return average fuel 'economy' in kilometers per liter of fuel since last reset.  Setting this to any value should reset the counter to '0'
   */
   attribute UInt16 AverageEconomy;

  /*!  AverageConsumption
   *   \brief  Must return average fuel consumption in per distance travelled (Unit: milliliters per 100 kilometers). Setting this to any value should reset the counter to '0'
   */
   attribute UInt32 AverageConsumption;

  /*!  FuelConsumedSinceRestart
   *   \brief must return fuel consumed since engine start; (Unit: milliliters per 100 kilometers) resets to 0 each restart
   */
   attribute UInt32 FuelConsumedSinceRestart readonly;

  /*!  FuelConsumedSinceRestart
   *   \brief must return fuel consumed since engine start; (Unit: milliliters per 100 kilometers) resets to 0 each restart
   */
   attribute UInt32 FuelConsumedSinceRestart readonly;
}


interface org.automotive.EngineOil extends VehiclePropertyType  {

  /*!  Remaining
   *   \brief  Must return remaining engine oil as percentage of fullness.
   */
   attribute UInt16 Remaining readonly

  /*!  Temperature
   *   \brief  Must return Engine Oil Temperature in Celcius.
   */
   attribute long Temperature readonly

  /*!  Pressure
   *   \brief  Must return Engine Oil Pressure in kPa.
   */
   attribute UInt16 Pressure readonly
}


interface org.automotive.Location extends VehiclePropertyType  {

  /*!  Latitude
   *   \brief  Must return latitude in Deg.Min (-180, +180)
   */
   attribute Double Latitude readonly

  /*!  Longitude
   *   \brief  Must return longitude in Deg.Min (-90, +90)
   */
   attribute Double Longitude readonly

  /*!  Altitude
   *   \brief  Must return altitude in meters above sea-level (0).
   */
   attribute Double Altitude readonly

  /*!  Direction
   *   \brief  Must return direction in Degrees  (0-360)
   */
   attribute UInt16 Direction readonly
}


interface org.automotive.ExteriorBrightness extends VehiclePropertyType  {

  /*!  ExteriorBrightness
   *   \brief Must return the brightness outside the vehicle in lux.
   */
   attribute UInt16 ExteriorBrightness readonly
}


interface org.automotive.Temperature extends VehiclePropertyType  {

  /*!  Interior
   *   \brief Must return the temperature of the interior of the vehicle in celcius.
   */
   /// Deprecated.  Use InteriorTemperature.  Remove in 0.13
   attribute signed short Interior readonly

  /*!  Exterior
   *   \brief Must return the temperature of the exterior of the vehicle in celcius.
   */
   /// Deprecated.  Use ExteriorTemperature.  Remove in 0.13
   attribute signed short Exterior readonly

  /*!  Interior
   *   \brief Must return the temperature of the interior of the vehicle in celcius.
   */
   attribute signed short InteriorTemperature readonly

  /*!  Exterior
   *   \brief Must return the temperature of the exterior of the vehicle in celcius.
   */
   attribute signed short ExteriorTemperature readonly
}


interface org.automotive.RainSensor extends VehiclePropertyType  {

  /*!  RainSensor
   *   \brief Must return level of rain intensity 0: No Rain - 10: Heaviest Rain.
   */
   attribute UInt16 RainSensor readonly
}


interface org.automotive.WindshieldWiper extends VehiclePropertyType  {
  const UInt16 WIPERSPEED_OFF = 0;
  const UInt16 WIPERSPEED_SLOWEST= 1;
  const UInt16 WIPERSPEED_FASTEST = 5;
  const UInt16 WIPERSPEED_AUTO = 10;

  /*!  WindshieldWiper
   *   \brief Must return Level of windshield whiper speed (see WIPERSPEED)
   */
   attribute UInt16 WindshieldWiper readonly
}

/*! Deprecated.  Use ClimateControl interface.  Remove in 0.13
*/
interface org.automotive.HVAC extends VehiclePropertyType  {
  const UInt16 AIRFLOWDIRECTION_FRONTPANEL = 0;
  const UInt16 AIRFLOWDIRECTION_FLOORDUCT= 1;
  const UInt16 AIRFLOWDIRECTION_FRONT = 0x02;
  const UInt16 AIRFLOWDIRECTION_DEFROSTER = 0x04;

  /*!  AirflowDirection
   *   \brief Must return airflow direction.  See
   */
  attribute UInt16 AirflowDirection;

  /*!  FanSpeed
   *   \brief Must return speed of the fan (0-7)
   */
  attribute UInt16 FanSpeed;

  /*!  TargetTemperature
   *   \brief Must return target desired temperature in celcius.
   */
  attribute UInt16 TargetTemperature;

  /*!  AirConditioning
   *   \brief Must return air conditioning on (true) / off (false).
   */
  attribute Boolean AirConditioning;

  /*!  AirRecirculation
   *   \brief Must return air recirculation on (true) / off (false).
   */
  attribute Boolean AirRecirculation;

  /*!  Heater
   *   \brief Must return heater on (true) / off (false).
   */
  attribute Boolean Heater;

  /*!  SteeringWheelHeater
   *   \brief Must return air recirculation on (true) / off (false).
   */
  attribute Boolean SteeringWheelHeater;

  /*!  SeatHeater
   *   \brief Must return seat heater status: 0-100%.
   */
  attribute UInt16 SeatHeater;

  /*!  SeatCooler
   *   \brief Must return seat heater status: on (true) / off (false).
   */
  attribute Boolean SeatCooler;
}

enumeration AirflowDirectionType
{
  frontpanel = "frontpanel",
  floorduct = "floorduct",
  bilevel = "bilevel",
  defrostfloor = "defrostfloor"
}

interface org.automotive.ClimateControl extends VehiclePropertyType  {
  /*!  AirflowDirection
  *   \brief Must return current status of the direction of the air flow through the ventilation system
  */
  attribute AirflowDirectionType AirflowDirection;

  /*!  FanSpeedLevel
  *   \brief Must return seat heater status: on (true) / off (false).
  */
  attribute UInt8 FanSpeedLevel;

  /*!  TargetTemperature
  *   \brief Must return current setting of the desired temperature (Unit: celsius)
  */
  attribute Int8 TargetTemperature;

  /*!  AirConditioning
  *   \brief Must return current status of the air conditioning system: on (true) or off (false)
  */
  attribute Boolean AirConditioning;

  /*!  Heater
  *   \brief Must return current status of the heating system: on (true) or off (false)
  */
  attribute Boolean Heater;

  /*!  SeatHeater
  *   \brief Must return current status of the seat warmer ( 0: off, 1: least warm, 10: warmest )
  */
  attribute UInt8 SeatHeater;

  /*!  SeatCooler
  *   \brief Must return current status of the seat ventilation ( 0: off, 1: least warm, 10: warmest )
  */
  attribute UInt8 SeatCooler;

  /*!  AirRecirculation
  *   \brief Must return current setting of air recirculation: on (true) or pulling in outside air (false).
  */
  attribute Boolean AirRecirculation;

  /*!  SteeringWheelHeater
  *   \brief Must return current status of steering wheel heater ( 0: off, 1: least warm, 10: warmest ).
  */
  attribute UInt8 SteeringWheelHeater;
}

interface org.automotive.WindowStatus extends VehiclePropertyType  {

  /*!  Openness
   *   \brief Must return window openness percentage (100% fully open, 0% fully closed)
   *  for the window location see "zone" attribute
   */
  attribute UInt16 Openness;

  /*!  Defrost
   *   \brief Must return the defroster status of the window. On = true, Off = false.
   *   Deprecated.  Use Defrost interface.  Remove in 0.13.
   */
  attribute Boolean Defrost;
}

interface org.automotive.Defrost extends VehiclePropertyType  {

  /*! DefrostWindow
   *  \brief Must return current status of the defrost switch for mirrors. It can be
   *  used to send user's request for changing setting.
   */
  attribute Boolean DefrostWindow;

  /*! DefrostMirrors
   *  \brief Must return current status of the defrost switch for window. It can be
   *  used to send user's request for changing setting.
   */
  attribute Boolean DefrostMirrors;
}

interface org.automotive.Sunroof extends VehiclePropertyType  {

  /*!  Openness
   *   \brief Must return window status for sunroof openness percentage.
   */
  attribute UInt16 Openness;

  /*!  Tilt
   *   \brief Must return tilt status for sunroof percentage.
   */
  attribute UInt16 Tilt;
}


interface org.automotive.ConvertibleRoof extends VehiclePropertyType  {

  /*!  Openness
   *   \brief Must return convertible roof openness percentage.
   */
   attribute UInt16 Openness;
}


interface org.automotive.VehicleId extends VehiclePropertyType  {

  /*!  WMI
   *   \brief MUST return World Manufacturer Identifier (WMI)
   *   WMI is defined by SAE ISO 3780:2009.  3 characters.
   */
   attribute String WMI readonly

  /*!  VIN
   *   \brief MUST return Vehicle Identification Number (VIN) as defined by ISO 3779. 17 characters.
   */
   attribute String VIN readonly
}


interface org.automotive.Size extends VehiclePropertyType  {

  /*!  Width
   *   \brief MUST return width of vehicle in mm
   */
   attribute UInt16 Width readonly

  /*!  Height
   *   \brief MUST return height of vehicle in mm
   */
   attribute UInt16 Height readonly

  /*!  Length
   *   \brief MUST return length of vehicle in mm
   */
   attribute UInt16 Length readonly
}


interface org.automotive.FuelInfo extends VehiclePropertyType  {
  const UInt16 FUELTYPE_GASOLINE = 0;
  const UInt16 FUELTYPE_HIGH_OCTANE= 1;
  const UInt16 FUELTYPE_DIESEL = 2;
  const UInt16 FUELTYPE_ELECTRIC = 3;
  const UInt16 FUELTYPE_HYDROGEN = 4;
  const UInt16 REFUELPOSITION_LEFT = 0;
  const UInt16 REFUELPOSITION_RIGHT= 1;
  const UInt16 REFUELPOSITION_FRONT = 2;
  const UInt16 REFUELPOSITION_REAR = 3;

  /*!  Type
   *   \brief MUST return type of fuel.  integer 0-4 (see
   */
   attribute UInt16 Type readonly

  /*!  RefuelPosition
   *   \brief MUST return position of refuling (see
   */
   attribute UInt16 RefuelPosition readonly
}


interface org.automotive.VehicleType extends VehiclePropertyType  {
  const UInt16 VEHICLETYPE_SEDAN = 0;
  const UInt16 VEHICLETYPE_COUPE= 1;
  const UInt16 VEHICLETYPE_CABRIOLE = 2;
  const UInt16 VEHICLETYPE_ROADSTER = 3;
  const UInt16 VEHICLETYPE_SUV = 4;
  const UInt16 VEHICLETYPE_TRUCK = 5;

  /*!  Type
   *   \brief MUST return type of Vehicle.  Integer 0-5 (see
   */
   attribute UInt16 Type readonly
}


interface org.automotive.Doors extends VehiclePropertyType  {

  /*!  DoorsPerRow
   *   \brief MUST return Number of doors in each row.  The index represents the row.  Position '0'
   *   represents the first row, '1' the second row etc.
   *   Example a common mini-van may have Doors[0] = 2 doors,
   *   Doors[1] = 1 (side door), Doors[2] = 1 (trunk).
   */
   attribute Array<UInt16> DoorsPerRow readonly
}


interface org.automotive.WheelInformation extends VehiclePropertyType  {

  /*!  FrontWheelRadius
   *   \brief MUST return Radius of Front Wheel(s) in mm.
   */
   attribute UInt16 FrontWheelRadius readonly

  /*!  RearWheelRadius
   *   \brief MUST return Radius of Rear Wheel(s) in mm.
   */
   attribute UInt16 RearWheelRadius readonly

  /*!  WheelTrack
   *   \brief MUST return Wheel Track in mm.
   */
   attribute UInt16 WheelTrack readonly

  /*!  ABS
   *   \brief MUST return Antilock Brake System status: on = true, off = false.
   */
   attribute Boolean ABS readonly
}


interface org.automotive.Odometer extends VehiclePropertyType  {

  /*!  Odometer
   *   \brief MUST return Distance traveled in km
   */
   /// Deprecated. Use DistanceTotal.  Remove in 0.13
   attribute UInt32 Odometer readonly

  /*!  DistnaceTotal
   *   \brief MUST return Distance traveled in m
   */
   attribute UInt32 DistanceTotal readonly

  /*!  DistanceSinceStart
   *   \brief MUST return Distance traveled since start in m
   */
   attribute UInt32 DistanceSinceStart readonly

}


interface org.automotive.Fluid extends VehiclePropertyType  {

  /*!  Transmission
   *   \brief MUST return Transmission fluid level percentage. 0-100.
   */
   attribute UInt16 Transmission readonly

  /*!  Brake
   *   \brief MUST return Brake fluid level percentage. 0-100.
   */
   attribute UInt16 Brake readonly

  /*!  Washer
   *   \brief MUST return Washer fluid level percentage. 0-100.
   */
   attribute UInt16 Washer readonly
}

/// Deprecated.  Use BatteryStatus.  Remove in 0.13
interface org.automotive.Battery extends VehiclePropertyType  {

  /*!  Voltage
   *   \brief MUST return battery voltage.
   */
   attribute Double Voltage readonly

  /*!  Current
   *   \brief MUST return battery current in Amperes
   */
   attribute Double Current readonly
}

interface org.automotive.BatteryStatus extends VehiclePropertyType  {

  /*!  Voltage
   *   \brief MUST return battery voltage.
   */
   attribute UInt8 Voltage readonly

  /*!  Current
   *   \brief MUST return battery current in Amperes
   */
   attribute UInt8 Current readonly

  /*!  ChargeLevel
   *   \brief MUST return battery charge level (Unit: percentage, 0%: empty, 100%: full).
   */
   attribute UInt8 ChargeLevel readonly
}


interface org.automotive.Tire extends VehiclePropertyType  {

  /*!  Pressure
   *   \brief MUST return tire pressure in kPa.
   */
   attribute UInt16 Pressure readonly

  /*!  Temperature
   *   \brief MUST return left front tire temperature in Celcius.
   */
   attribute Int16 Temperature readonly

  /*!  Temperature
   *   \brief MUST return true if any tire pressure is low: pressure low (true), pressure not low (false).
   */
   attribute Boolean PressureLow readonly
}


interface org.automotive.SecurityAlert extends VehiclePropertyType  {

  /*!  SecurityAlert
   *   \brief MUST return
   */
   attribute Boolean SecurityAlert readonly
}

/// Deprecated.  Use LightStatus.  remove in 0.13
interface org.automotive.ParkingBrake extends VehiclePropertyType  {

  /*!  ParkingBrake
   *   must return status of parking brake:  Engaged = true, Disengaged = false.
   */
   attribute Boolean ParkingBrake readonly
}

/// Deprecated.  Use LightStatus.  remove in 0.13
interface org.automotive.ParkingLight extends VehiclePropertyType  {

  /*!  ParkingLight
   *   must return status of parking light:  Engaged = true, Disengaged = false.
   */
   attribute Boolean ParkingLight readonly
}

/// Deprecated.  Use LightStatus.  remove in 0.13
interface org.automotive.HazardLight extends VehiclePropertyType  {

  /*!  HazardLight
   *   must return status of hazard light:  Engaged = true, Disengaged = false.
   */
   attribute Boolean HazardLight readonly
}


interface org.automotive.AntilockBrakingSystem extends VehiclePropertyType  {

  /*!  AntilockBrakingSystem
   *   \brief MUST return whether Antilock Braking System is Idle (false) or Engaged (true)
   */
   attribute Boolean AntilockBrakingSystem readonly
}


interface org.automotive.TractionControlSystem extends VehiclePropertyType  {

  /*!  TractionControlSystem
   *   \brief MUST return whether Traction Control System is Off (false) or On (true)
   */
   attribute Boolean TractionControlSystem readonly
}


interface org.automotive.VehicleTopSpeedLimit extends VehiclePropertyType  {

  /*!  VehicleTopSpeedLimit
   *   \brief MUST returns top rated speed in km/h. 0 = no limit
   */
   attribute UInt16 VehicleTopSpeedLimit readonly
}


interface org.automotive.AirbagStatus extends VehiclePropertyType  {

  const UInt16 AIRBAGSTATUS_INACTIVE = 0;
  const UInt16 AIRBAGSTATUS_ACTIVE = 1;
  const UInt16 AIRBAGSTATUS_DEPLOYED = 2;

  /*!  AirbagStatus
   *   \brief MUST returns Airbag status (byte) (see AIRBAGSTATUS_*)
   */
   attribute UInt16 AirbagStatus readonly
}

enumeration

/*!
 * Deprecated.  Use "Door".  Remove in 0.13
 */
interface org.automotive.DoorStatus extends VehiclePropertyType  {



  /*!  DoorStatus
   *   \brief MUST returns Door status (byte).
   * CLOSED = 0
   * OPEN = 1
   * AJAR = 2
   */
   attribute UInt16 DoorStatus readonly

  /*!  DoorLockStatus
   *   \brief MUST returns Door status (bool locked = true, unlocked = false).
   */
  attribute Boolean DoorLockStatus;

  /*!  ChildLockStatus
   *   \brief MUST returns Child lock status of rear doors.  active = true, inactive = false.
   *   Setting this to 'true' will prevent the rear doors from being opened
   *   from the inside.
   */
  attribute Boolean ChildLockStatus;
}

enumeration DoorStatus {
  open = "open",
  ajar = "ajar",
  closed = "closed"
}

interface org.automotive.Door extends VehiclePropertyType  {

  /*!  Status
   *   \brief MUST returns Door status (byte).  See DOORSTATUS_*
   */
   attribute DoorStatus Status readonly

  /*!  Lock
   *   \brief MUST returns Door status (bool locked = true, unlocked = false).
   */
  attribute Boolean Lock;

  /*!  ChildLock
   *   \brief MUST returns Child lock status of rear doors.  active = true, inactive = false.
   *   Setting this to 'true' will prevent the rear doors from being opened
   *   from the inside.
   */
  attribute Boolean ChildLock;
}


interface org.automotive.SeatBelt extends VehiclePropertyType  {

  /*! Status
   *  \brief MUST return Seat Belt Status (bool: Fasten = true, Unfastened = false)
   */
   attribute Boolean Status readonly
}


interface org.automotive.OccupantStatus extends VehiclePropertyType  {

  /*!  OccupantStatus
   *   \brief MUST returns status of Occupant (byte, see
   */
   attribute UInt16 OccupantStatus readonly
}


interface org.automotive.ObstacleDistance extends VehiclePropertyType  {

  /*!  ObstacleDistance
   *   \brief MUST returns Distance Sensor distance (Double) in m.
   */
   attribute Double ObstacleDistance readonly
}


interface org.automotive.NightMode extends VehiclePropertyType {

  /*!
   * \brief MUST return whether or not the system is in NightMode or not.  True = Night time, False = Day time
   * Deprecated.  Will be removed in 0.13. Use "Mode"
   */
   attribute Boolean NightMode readonly

  /*!
   * \brief MUST return whether or not the system is in NightMode or not.  True = Night time, False = Day time
   */
   attribute Boolean Mode readonly
}


interface org.automotive.DrivingMode extends VehiclePropertyType {

  /*!
  * \brief MUST return whether or not the system is in DrivingMode or not.  1 = Driving, 0 = Not Driving
  */
   attribute UInt16 DrivingMode readonly

  /*!
  * \brief must return true if vehicle is in driving mode
  */
   attribute Boolean Mode readonly
}


interface org.automotive.KeyId extends VehiclePropertyType {

  /*!
  * \brief MUST return
  */
   attribute String KeyId readonly
}

interface org.automotive.Language extends VehiclePropertyType {

  /*!
  * \brief MUST return
  */
   attribute String Language readonly
}


interface org.automotive.MeasurementSystem extends VehiclePropertyType {

  /*!
  * \brief MUST return 0 = Metric, 1 = ImperialUS, 2 = ImperialUK
  */
   attribute UInt16 MeasurementSystem readonly
}


interface org.automotive.MirrorSetting extends VehiclePropertyType {

  /*!
  * \brief MUST return
  */
   attribute UInt16 Pan readonly
   attribute UInt16 Tilt readonly
}


interface org.automotive.SeatPosition extends VehiclePropertyType {

  /*!
  * \brief MUST return
  */
   attribute UInt16 Recline readonly

    /*!
  * \brief MUST return
  */
   attribute UInt16 Slide readonly

  /*!
  * \brief MUST return
  */
   attribute UInt16 CushionHeight readonly

  /*!
  * \brief MUST return
  */
   attribute UInt16 Headrest readonly

  /*!
  * \brief MUST return
  */
   attribute UInt16 BackCushion readonly

  /*!
  * \brief MUST return
  */
   attribute UInt16 SideCushion readonly
}


interface org.automotive.SteeringWheelPosition extends VehiclePropertyType {

  /*!
  * \brief MUST return
  */
   attribute UInt16 Tilt readonly

  /*!
  * \brief MUST return
  */
   attribute UInt16 Slide readonly
}


interface org.automotive.DashboardIllumination extends VehiclePropertyType {

  /*!
  * \brief MUST return
  */
   attribute UInt16 DashboardIllumination readonly
}


interface org.automotive.GeneratedVehicleSoundMode extends VehiclePropertyType {

  /*!
  * \brief MUST return Sound Mode: 0 = Normal, 1 = Quiet, 2 = Sportive
  */
   attribute UInt16 GeneratedVehicleSoundMode readonly
}


/*! SteeringWheelAngle
 *\brief
 * Deprecated.  Use SteeringWheel
 */
interface org.automotive.SteeringWheelAngle extends VehiclePropertyType {

  /*!
  * \brief MUST return angle of the steering wheel. 0-359 degrees.
  */
   attribute UInt16 SteeringWheelAngle readonly
}

interface org.automotive.SteeringWheel extends VehiclePropertyType {

  /*!
  * \brief MUST return angle of steering wheel off centerline (Unit: degrees -:degrees to the left, +:degrees to the right)
  */
   attribute Int16 Angle readonly
}


interface org.automotive.ButtoneEvent extends VehiclePropertyType {

  /*!
  * \brief MUST return button event:
  * NoButton =0
  * PlayButton = 1,
  * SkipButton = 1 << 1,
  * PrevButton = 1 << 2,
  * PauseButton = 1 << 3,
  * Preset1Button = 1 << 4,
  * Preset2Button = 1 << 5,
  * Preset3Button = 1 << 6,
  * Preset4Button = 1 << 7,
  * StopButton = 1 << 8,
  * NavigateUpButton = 1 << 9,
  * NavigateDownButton = 1 << 10,
  * NavigateLeftButton = 1 << 11,
  * NavigateRightButton = 1 << 12
  */
   attribute UInt32 ButtonEvent readonly
}


interface org.automotive.DriverId extends VehiclePropertyType {

  /*!
  * \brief MUST return driver ID.  Driver Id is an abstract and can be determined
  * from multiple sources including bluetooth, key, key fob, etc.
  */
   attribute String DriverId readonly
}

interface org.automotive.ThrottlePosition extends VehiclePropertyType {

  /*!
  * \brief MUST return throttle position as a percentage (Unit: percentage, 0%: closed, 100%: fully open)
  */
   attribute Uint8 Value readonly
}

interface org.automotive.EngineCoolant extends VehiclePropertyType {

  /*!
  * \brief MUST return engine coolant level (Unit: percentage 0%: empty, 100%: full)
  */
   attribute Uint8 Level readonly

  /*!
  * \brief MUST return engine coolant temperature (Unit: celcius)
  */
   attribute Uint8 Temperature readonly
}

}

