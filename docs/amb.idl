/**
Details. 

\brief Allows access to the vehicle API 
**/

module Vehicle {

[NoInterfaceObject]
interface VehiclePropertyError   { 
	const UInt16 PERMISSION_DENIED = 1;
	const UInt16 PROPERTY_UNAVAILABLE = 2;
	const UInt16 TIMEOUT = 3;
	const UInt16 UNKNOWN = 10;
	
	/**  code
	 *   MUST return error code. 
	 **/
	readonly attribute UInt16 code;

	/**  message
	 *   MUST return error message 
	 **/
	readonly attribute String message;
};

[NoInterfaceObject]
interface VehiclePropertyType {

	/**
	* \brief time stamp marking the last time a property in the interface updated
	**/
	readonly attribute Double Time;

	/**
	* \brief Zone in which the interface is situated.
	**/
	readonly attribute Zone Zone;
	
	/**
	* \brief returns dictionary of objectName and values for data between
	* 'beginTime' and 'endTime'
	* \arg beginTime time stamp in Seconds since Unix Epoc
	* \arg endTime time stamp in Seconds since Unix Epoc
	**/
	Dict{String,Variant} GetHistory(Double beginTime, Double endTime);
}

enum Zone {
	None = 0,
	Front = 1,
	Middle = 1 << 1,
	Right = 1 << 2,
	Left = 1 << 3,
	Rear = 1 << 4,
	Center = 1 << 5
}

/** org.automotive.Manager
 * \brief Manager is a helper interface for discovering and finding available objects
 **/
[NoInterfaceObject]
interface org.automotive.Manager  {

	/**  
	 *  \brief returns supported properties
	**/
	Array{String} List();

	/**  
	 *  \brief find the DBus object path which matches "objectName" and "zone".
	 *  \arg String property is the requested property to be retrieved.
	 *  \arg Zone zone is the zone which the object
	 *  \returns string representing the DBus Object path
	**/
	String FindObjectForZone(String objectName, Zone zone);
	
	/**  
	 *  \brief find the DBus object path matching the given "objectName".  If the object path
	 *  \brief does not exist, it will be created.
	 *  \arg String objectName to find
	 *  \returns list of object paths that provide the given object Name.
	**/
	Array<String> FindObject(String objectName)
        
	/**  
	 *  \brief get a list of zones for a given objectName.  If the object path
	 *  \brief does not exist, it will be created.
	 *  \arg String objectName object name.
	 *  \returns list of zones for the given objectName (@see Zone)
	**/
	Array<UInt16> ZonesForObjectName(String objectName)
};

[NoInterfaceObject]
interface org.automotive.VehicleSpeed : VehiclePropertyType  {

	/**  VehicleSpeed
	 *   \brief  Must return Vehicle Speed in kilometers per hour.    
	 **/
	readonly attribute UInt16 VehicleSpeed;
};

[NoInterfaceObject]
interface org.automotive.EngineSpeed : VehiclePropertyType  {

	/**  EngineSpeed
	 *   \brief  Must return Engine Speed in rotations per minute.    
	 **/
	readonly attribute UInt16 EngineSpeed;
};

[NoInterfaceObject]
interface org.automotive.VehiclePowerMode : VehiclePropertyType  {
	const UInt16 VEHICLEPOWERMODE_OFF = 0,
	const UInt16 VEHICLEPOWERMODE_ACCESSORY1 = 1,
	const UInt16 VEHICLEPOWERMODE_ACCESSORY2 = 2,
	const UInt16 VEHICLEPOWERMODE_RUN = 3;

	/**  VehiclePowerMode
	 *   \brief  Must return Vehicle Power mode (see VEHICLEPOWERMODE)    
	 **/
	readonly attribute octet VehiclePowerMode;
};

[NoInterfaceObject]
interface org.automotive.TripMeter : VehiclePropertyType  {

	/**  TripMeters
	 *   \brief  Must return trip meters.  Changing any items in the array will reset the item's value to '0'.
	 **/
	 attribute Array<UInt16> TripMeters;
};

[NoInterfaceObject]
interface org.automotive.Acceleration : VehiclePropertyType  {

	/**  X
	 *   \brief  Must return acceleration on the "X" axis as 1/1000 G (gravitational force).    
	 **/
	readonly attribute UInt16 X;

	/**  Y
	 *   \brief  Must return acceleration on the "Y" axis as 1/1000 G (gravitational force).    
	 **/
	readonly attribute UInt16 Y;

	/**  Z
	 *   \brief  Must return acceleration on the "Z" axis as 1/1000 G (gravitational force).    
	 **/
	readonly attribute UInt16 Z;
};

[NoInterfaceObject]
interface org.automotive.Transmission : VehiclePropertyType  {
	const UInt16 TRANSMISSIONPOSITION_NEUTRAL = 0;
	const UInt16 TRANSMISSIONPOSITION_FIRST = 1;
	const UInt16 TRANSMISSIONPOSITION_SECOND = 2;
	const UInt16 TRANSMISSIONPOSITION_THIRD = 3;
	const UInt16 TRANSMISSIONPOSITION_FORTH = 4;
	const UInt16 TRANSMISSIONPOSITION_FIFTH = 5;
	const UInt16 TRANSMISSIONPOSITION_SIXTH = 6;
	const UInt16 TRANSMISSIONPOSITION_SEVENTH = 7;
	const UInt16 TRANSMISSIONPOSITION_EIGHTH = 8;
	const UInt16 TRANSMISSIONPOSITION_NINTH = 9;
	const UInt16 TRANSMISSIONPOSITION_TENTH = 10;
	const UInt16 TRANSMISSIONPOSITION_CVT = 64;
	const UInt16 TRANSMISSIONPOSITION_REVERSE = 128;
	const UInt16 TRANSMISSIONPOSITION_PARK = 255;
	const UInt16 TRANSMISSIONMODE_NORMAL = 0;
	const UInt16 TRANSMISSIONMODE_SPORT = 1;
	const UInt16 TRANSMISSIONMODE_ECONOMY = 2;
	const UInt16 TRANSMISSIONMODE_OEMCUSTOM1 = 3;
	const UInt16 TRANSMISSIONMODE_OEMCUSTOM2 = 4;

	/**  GearPosition
	 *   \brief  Must return transmission gear position (see TRANSMISSIONPOSITION)    
	 **/
	readonly attribute octet GearPosition;

	const UInt16 TRANSMISSIONGEARTYPE_AUTO=0;
	const UInt16 TRANSMISSIONGEARTYPE_MANUAL=1;
	const UInt16 TRANSMISSIONGEARTYPE_CV=2;

	/**  TransmissionGearType
	 *   \brief MUST return transmission gear type of either Automatic, Manual or Constant Variable (CV). 
	 *   See TRANSMISSIONGEARTYPE
	 **/
	readonly attribute octet Type;

	/**  Mode
	 *   \brief  Must return transmission Mode (see 
	 **/
	readonly attribute octet Mode;
};

[NoInterfaceObject]
interface org.automotive.CruiseControlStatus : VehiclePropertyType  {

	/**  Activated
	 *   \brief  Must return whether or not the Cruise Control system is active (true) or inactive (false)    
	 **/
	readonly attribute Boolean Activated;

	/**  Speed
	 *   \brief  Must return target Cruise Control speed in kilometers per hour (kph).    
	 **/
	readonly attribute UInt16 Speed;
};

[NoInterfaceObject]
interface org.automotive.WheelBrake : VehiclePropertyType  {

	/**  Engaged
	 *   \brief  Must return Wheel Brake status: Engaged = true, disengaged = false    
	 **/
	readonly attribute Boolean Engaged;
};

[NoInterfaceObject]
interface org.automotive.LightStatus : VehiclePropertyType  {

	/**  Head
	 *   \brief  Must return headlight status: on = true, off = false.    
	 **/
	readonly attribute Boolean Head;

	/**  RightTurn
	 *   \brief  Must return right turn signal status: on = true, off = false.    
	 **/
	readonly attribute Boolean RightTurn;

	/**  LeftTurn
	 *   \brief  Must return left turn signal status: on = true, off = false.    
	 **/
	readonly attribute Boolean LeftTurn;

	/**  Brake
	 *   \brief  Must return  brake signal light status: on = true, off = false.    
	 **/
	readonly attribute Boolean Brake;

	/**  Fog
	 *   \brief  Must return fog light status: on = true, off = false.    
	 **/
	readonly attribute Boolean Fog;

	/**  Hazard
	 *   \brief  Must return hazard light status: on = true, off = false.    
	 **/
	readonly attribute Boolean Hazard;

	/**  Parking
	 *   \brief  Must return parking light status: on = true, off = false.    
	 **/
	readonly attribute Boolean Parking;

	/**  HighBeam
	 *   \brief  Must return high beam status: on = true, off = false.    
	 **/
	readonly attribute Boolean HighBeam;
};

[NoInterfaceObject]
interface org.automotive.InteriorLightStatus : VehiclePropertyType  {

	/**  Passenger
	 *   \brief  Must return passenger interior light status: on = true, off = false    
	 **/
	readonly attribute Boolean Passenger;

	/**  Driver
	 *   \brief  Must return driver interior light status: on = true, off = false    
	 **/
	readonly attribute Boolean Driver;

	/**  Center
	 *   \brief  Must return center interior light status: on = true, off = false    
	 **/
	readonly attribute Boolean Center;
};

[NoInterfaceObject]
interface org.automotive.Horn : VehiclePropertyType  {

	/**  On
	 *   \brief  Must return horn status: on = true, off = false    
	 **/
	readonly attribute Boolean On;
};

[NoInterfaceObject]
interface org.automotive.Fuel : VehiclePropertyType  {

	/**  Level
	 *   \brief  Must return fuel level as a percentage of fullness.    
	 **/
	readonly attribute UInt16 Level;

	/**  Range
	 *   \brief  Must return estimated fuel range in kilometers.    
	 **/
	readonly attribute UInt16 Range;

	/**  InstantConsumption
	 *   \brief  Must return instant fuel consumption in microiliters of fuel per second.
	 **/
	readonly attribute UInt16 InstantConsumption;

	/**  InstantEconomy
	 *   \brief  Must return instant fuel 'economy' in kilometers per liter of fuel.    
	 **/
	readonly attribute UInt16 InstantEconomy;

	/**  AverageEconomy
	 *   \brief  Must return average fuel 'economy' in kilometers per liter of fuel since last reset.  Setting this to any value should reset the counter to '0'    
	 **/
	 attribute UInt16 AverageEconomy;
};

[NoInterfaceObject]
interface org.automotive.EngineOil : VehiclePropertyType  {

	/**  Remaining
	 *   \brief  Must return remaining engine oil as percentage of fullness.    
	 **/
	readonly attribute UInt16 Remaining;

	/**  Temperature
	 *   \brief  Must return Engine Oil Temperature in Celcius.    
	 **/
	readonly attribute long Temperature;

	/**  Pressure
	 *   \brief  Must return Engine Oil Pressure in kPa.    
	 **/
	readonly attribute UInt16 Pressure;
};

[NoInterfaceObject]
interface org.automotive.Location : VehiclePropertyType  {

	/**  Latitude
	 *   \brief  Must return latitude in Deg.Min (-180, +180)    
	 **/
	readonly attribute Double Latitude;

	/**  Longitude
	 *   \brief  Must return longitude in Deg.Min (-90, +90)    
	 **/
	readonly attribute Double Longitude;

	/**  Altitude
	 *   \brief  Must return altitude in meters above sea-level (0).    
	 **/
	readonly attribute Double Altitude;

	/**  Direction
	 *   \brief  Must return direction in Degrees  (0-360)    
	 **/
	readonly attribute UInt16 Direction;
};

[NoInterfaceObject]
interface org.automotive.ExteriorBrightness : VehiclePropertyType  {

	/**  ExteriorBrightness
	 *   \brief Must return the brightness outside the vehicle in lux.    
	 **/
	readonly attribute UInt16 ExteriorBrightness;
};

[NoInterfaceObject]
interface org.automotive.Temperature : VehiclePropertyType  {

	/**  Interior
	 *   \brief Must return the temperature of the interior of the vehicle in celcius.    
	 **/
	readonly attribute signed short Interior;

	/**  Exterior
	 *   \brief Must return the temperature of the exterior of the vehicle in celcius.    
	 **/
	readonly attribute signed short Exterior;
};

[NoInterfaceObject]
interface org.automotive.RainSensor : VehiclePropertyType  {

	/**  RainSensor
	 *   \brief Must return level of rain intensity 0: No Rain - 10: Heaviest Rain.    
	 **/
	readonly attribute UInt16 RainSensor;
};

[NoInterfaceObject]
interface org.automotive.WindshieldWiper : VehiclePropertyType  {
	const UInt16 WIPERSPEED_OFF = 0;
	const UInt16 WIPERSPEED_SLOWEST= 1;
	const UInt16 WIPERSPEED_FASTEST = 5;
	const UInt16 WIPERSPEED_AUTO = 10;

	/**  WindshieldWiper
	 *   \brief Must return Level of windshield whiper speed (see WIPERSPEED)    
	 **/
	readonly attribute UInt16 WindshieldWiper;
};

[NoInterfaceObject]
interface org.automotive.HVAC : VehiclePropertyType  {
	const UInt16 AIRFLOWDIRECTION_FRONTPANEL = 0;
	const UInt16 AIRFLOWDIRECTION_FLOORDUCT= 1;
	const UInt16 AIRFLOWDIRECTION_FRONT = 0x02;
	const UInt16 AIRFLOWDIRECTION_DEFROSTER = 0x04;

	/**  AirflowDirection
	 *   \brief Must return airflow direction.  See 
	 **/
	attribute UInt16 AirflowDirection;

	/**  FanSpeed
	 *   \brief Must return speed of the fan (0-7)    
	 **/
	attribute UInt16 FanSpeed;

	/**  TargetTemperature
	 *   \brief Must return target desired temperature in celcius.    
	 **/
	attribute UInt16 TargetTemperature;

	/**  AirConditioning
	 *   \brief Must return air conditioning on (true) / off (false).    
	 **/
	attribute Boolean AirConditioning;

	/**  AirRecirculation
	 *   \brief Must return air recirculation on (true) / off (false).    
	 **/
	attribute Boolean AirRecirculation;

	/**  Heater
	 *   \brief Must return heater on (true) / off (false).    
	 **/
	attribute Boolean Heater;

	/**  SteeringWheelHeater
	 *   \brief Must return air recirculation on (true) / off (false).    
	 **/
	attribute Boolean SteeringWheelHeater;

	/**  SeatHeater
	 *   \brief Must return seat heater status: 0-100%.
	 **/
	attribute UInt16 SeatHeater;

	/**  SeatCooler
	 *   \brief Must return seat heater status: on (true) / off (false).    
	 **/
	attribute Boolean SeatCooler;
};

[NoInterfaceObject]
interface org.automotive.WindowStatus : VehiclePropertyType  {

	/**  Openness
	 *   \brief Must return window openness percentage (100% fully open, 0% fully closed)
	 *  for the window location see "zone" attribute
	 **/
	attribute UInt16 Openness;

	/**  Defrost
	 *   \brief Must return the defroster status of the window. On = true, Off = false.
	 **/
	attribute Boolean Defrost;
};

[NoInterfaceObject]
interface org.automotive.Sunroof : VehiclePropertyType  {

	/**  Openness
	 *   \brief Must return window status for sunroof openness percentage.    
	 **/
	attribute UInt16 Openness;

	/**  Tilt
	 *   \brief Must return tilt status for sunroof percentage.    
	 **/
	attribute UInt16 Tilt;
};

[NoInterfaceObject]
interface org.automotive.ConvertibleRoof : VehiclePropertyType  {

	/**  Openness
	 *   \brief Must return convertible roof openness percentage.
	 **/
	 attribute UInt16 Openness;
};

[NoInterfaceObject]
interface org.automotive.VehicleId : VehiclePropertyType  {

	/**  WMI
	 *   \brief MUST return World Manufacturer Identifier (WMI)    
	 *   WMI is defined by SAE ISO 3780:2009.  3 characters.    
	 **/
	readonly attribute String WMI;

	/**  VIN
	 *   \brief MUST return Vehicle Identification Number (VIN) as defined by ISO 3779. 17 characters.    
	 **/
	readonly attribute String VIN;
};

[NoInterfaceObject]
interface org.automotive.Size : VehiclePropertyType  {

	/**  Width
	 *   \brief MUST return width of vehicle in mm    
	 **/
	readonly attribute UInt16 Width;

	/**  Height
	 *   \brief MUST return height of vehicle in mm    
	 **/
	readonly attribute UInt16 Height;

	/**  Length
	 *   \brief MUST return length of vehicle in mm    
	 **/
	readonly attribute UInt16 Length;
};

[NoInterfaceObject]
interface org.automotive.FuelInfo : VehiclePropertyType  {
	const UInt16 FUELTYPE_GASOLINE = 0;
	const UInt16 FUELTYPE_HIGH_OCTANE= 1;
	const UInt16 FUELTYPE_DIESEL = 2;
	const UInt16 FUELTYPE_ELECTRIC = 3;
	const UInt16 FUELTYPE_HYDROGEN = 4;
	const UInt16 REFUELPOSITION_LEFT = 0;
	const UInt16 REFUELPOSITION_RIGHT= 1;
	const UInt16 REFUELPOSITION_FRONT = 2;
	const UInt16 REFUELPOSITION_REAR = 3;

	/**  Type
	 *   \brief MUST return type of fuel.  integer 0-4 (see 
	 **/
	readonly attribute UInt16 Type;

	/**  RefuelPosition
	 *   \brief MUST return position of refuling (see 
	 **/
	readonly attribute UInt16 RefuelPosition;
};

[NoInterfaceObject]
interface org.automotive.VehicleType : VehiclePropertyType  {
	const UInt16 VEHICLETYPE_SEDAN = 0;
	const UInt16 VEHICLETYPE_COUPE= 1;
	const UInt16 VEHICLETYPE_CABRIOLE = 2;
	const UInt16 VEHICLETYPE_ROADSTER = 3;
	const UInt16 VEHICLETYPE_SUV = 4;
	const UInt16 VEHICLETYPE_TRUCK = 5;

	/**  Type
	 *   \brief MUST return type of Vehicle.  Integer 0-5 (see 
	 **/
	readonly attribute UInt16 Type;
};

[NoInterfaceObject]
interface org.automotive.Doors : VehiclePropertyType  {

	/**  DoorsPerRow
	 *   \brief MUST return Number of doors in each row.  The index represents the row.  Position '0'    
	 *   represents the first row, '1' the second row etc.    
	 *   Example a common mini-van may have Doors[0] = 2 doors,    
	 *   Doors[1] = 1 (side door), Doors[2] = 1 (trunk).    
	 **/
	readonly attribute Array<UInt16> DoorsPerRow;
};

[NoInterfaceObject]
interface org.automotive.WheelInformation : VehiclePropertyType  {

	/**  FrontWheelRadius
	 *   \brief MUST return Radius of Front Wheel(s) in mm.    
	 **/
	readonly attribute UInt16 FrontWheelRadius;

	/**  RearWheelRadius
	 *   \brief MUST return Radius of Rear Wheel(s) in mm.    
	 **/
	readonly attribute UInt16 RearWheelRadius;

	/**  WheelTrack
	 *   \brief MUST return Wheel Track in mm.    
	 **/
	readonly attribute UInt16 WheelTrack;

	/**  ABS
	 *   \brief MUST return Antilock Brake System status: on = true, off = false.    
	 **/
	readonly attribute Boolean ABS;
};

[NoInterfaceObject]
interface org.automotive.Odometer : VehiclePropertyType  {

	/**  Odometer
	 *   \brief MUST return Distance traveled in km    
	 **/
	readonly attribute UInt16 Odometer;
};

[NoInterfaceObject]
interface org.automotive.Fluid : VehiclePropertyType  {

	/**  Transmission
	 *   \brief MUST return Transmission fluid level percentage. 0-100.    
	 **/
	readonly attribute UInt16 Transmission;

	/**  Brake
	 *   \brief MUST return Brake fluid level percentage. 0-100.    
	 **/
	readonly attribute UInt16 Brake;

	/**  Washer
	 *   \brief MUST return Washer fluid level percentage. 0-100.    
	 **/
	readonly attribute UInt16 Washer;
};

[NoInterfaceObject]
interface org.automotive.Battery : VehiclePropertyType  {

	/**  Voltage
	 *   \brief MUST return battery voltage.    
	 **/
	readonly attribute Double Voltage;

	/**  Current
	 *   \brief MUST return battery current in Amperes    
	 **/
	readonly attribute Double Current;
};

[NoInterfaceObject]
interface org.automotive.Tire : VehiclePropertyType  {

	/**  Pressure
	 *   \brief MUST return tire pressure in kPa.    
	 **/
	readonly attribute Double Pressure;

	/**  Temperature
	 *   \brief MUST return left front tire temperature in Celcius.    
	 **/
	readonly attribute Double Temperature;
};

[NoInterfaceObject]
interface org.automotive.SecurityAlert : VehiclePropertyType  {

	/**  SecurityAlert
	 *   \brief MUST return    
	 **/
	readonly attribute Boolean SecurityAlert;
};

[NoInterfaceObject]
interface org.automotive.ParkingBrake : VehiclePropertyType  {

	/**  ParkingBrake
	 *   must return status of parking brake:  Engaged = true, Disengaged = false.    
	 **/
	readonly attribute Boolean ParkingBrake;
};

[NoInterfaceObject]
interface org.automotive.ParkingLight : VehiclePropertyType  {

	/**  ParkingLight
	 *   must return status of parking light:  Engaged = true, Disengaged = false.    
	 **/
	readonly attribute Boolean ParkingLight;
};

[NoInterfaceObject]
interface org.automotive.HazardLight : VehiclePropertyType  {

	/**  HazardLight
	 *   must return status of hazard light:  Engaged = true, Disengaged = false.    
	 **/
	readonly attribute Boolean HazardLight;
};

[NoInterfaceObject]
interface org.automotive.AntilockBrakingSystem : VehiclePropertyType  {

	/**  AntilockBrakingSystem
	 *   \brief MUST return whether Antilock Braking System is Idle (false) or Engaged (true)    
	 **/
	readonly attribute Boolean AntilockBrakingSystem;
};

[NoInterfaceObject]
interface org.automotive.TractionControlSystem : VehiclePropertyType  {

	/**  TractionControlSystem
	 *   \brief MUST return whether Traction Control System is Off (false) or On (true)    
	 **/
	readonly attribute Boolean TractionControlSystem;
};

[NoInterfaceObject]
interface org.automotive.VehicleTopSpeedLimit : VehiclePropertyType  {

	/**  VehicleTopSpeedLimit
	 *   \brief MUST returns top rated speed in km/h. 0 = no limit    
	 **/
	readonly attribute UInt16 VehicleTopSpeedLimit;
};

[NoInterfaceObject]
interface org.automotive.AirbagStatus : VehiclePropertyType  {

	const UInt16 AIRBAGSTATUS_INACTIVE = 0;
	const UInt16 AIRBAGSTATUS_ACTIVE = 1;
	const UInt16 AIRBAGSTATUS_DEPLOYED = 2;

	/**  AirbagStatus
	 *   \brief MUST returns Airbag status (byte) (see AIRBAGSTATUS_*)
	 **/
	readonly attribute UInt16 AirbagStatus;
};

[NoInterfaceObject]
interface org.automotive.DoorStatus : VehiclePropertyType  {

	const UInt16 DOORSTATUS_CLOSED = 0;
	const UInt16 DOORSTATUS_OPEN = 1;
	const UInt16 DOORSTATUS_AJAR = 2;

	/**  DoorStatus
	 *   \brief MUST returns Door status (byte).  See DOORSTATUS_*
	 **/
	readonly attribute UInt16 DoorStatus;

	/**  DoorLockStatus
	 *   \brief MUST returns Door status (bool locked = true, unlocked = false).
	 **/
	readonly attribute Boolean DoorLockStatus;

	/**  ChildLockStatus
	 *   \brief MUST returns Child lock status of rear doors.  active = true, inactive = false.    
	 *   Setting this to 'true' will prevent the rear doors from being opened    
	 *   from the inside.    
	 **/
	readonly attribute Boolean ChildLockStatus;
};

[NoInterfaceObject]
interface org.automotive.SeatBelt : VehiclePropertyType  {

	/** Status
	 *  \brief MUST return Seat Belt Status (bool: Fasten = true, Unfastened = false)
	 **/
	readonly attribute Boolean Status;
};

[NoInterfaceObject]
interface org.automotive.OccupantStatus : VehiclePropertyType  {

	/**  OccupantStatus
	 *   \brief MUST returns status of Occupant (byte, see
	 **/
	readonly attribute UInt16 OccupantStatus;
};

[NoInterfaceObject]
interface org.automotive.ObstacleDistance : VehiclePropertyType  {

	/**  ObstacleDistance
	 *   \brief MUST returns Distance Sensor distance (Double) in m.
	 **/
	readonly attribute Double ObstacleDistance;
};

[NoInterfaceObject]
interface org.automotive.NightMode : VehiclePropertyType {
	
	/**
	 * \brief MUST return whether or not the system is in NightMode or not.  True = Night time, False = Day time
	 **/
	readonly attribute Boolean NightMode;
};

[NoInterfaceObject]
interface org.automotive.DrivingMode : VehiclePropertyType {

	/**
	* \brief MUST return whether or not the system is in DrivingMode or not.  1 = Driving, 0 = Not Driving
	**/
	readonly attribute UInt16 DrivingMode;
};

[NoInterfaceObject]
interface org.automotive.KeyId : VehiclePropertyType {

	/**
	* \brief MUST return 
	**/
	readonly attribute String KeyId;
};
[NoInterfaceObject]
interface org.automotive.Language : VehiclePropertyType {

	/**
	* \brief MUST return 
	**/
	readonly attribute String Language;
};

[NoInterfaceObject]
interface org.automotive.MeasurementSystem : VehiclePropertyType {

	/**
	* \brief MUST return 0 = Metric, 1 = ImperialUS, 2 = ImperialUK
	**/
	readonly attribute UInt16 MeasurementSystem;
};

[NoInterfaceObject]
interface org.automotive.MirrorSetting : VehiclePropertyType {

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 Pan;
	readonly attribute UInt16 Tilt;
};

[NoInterfaceObject]
interface org.automotive.SeatPosition : VehiclePropertyType {

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 Recline;

		/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 Slide;

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 CushionHeight;

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 Headrest;

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 BackCushion;

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 SideCushion;
};

[NoInterfaceObject]
interface org.automotive.SteeringWheelPosition : VehiclePropertyType {

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 Tilt;

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 Slide;
};

[NoInterfaceObject]
interface org.automotive.DashboardIllumination : VehiclePropertyType {

	/**
	* \brief MUST return 
	**/
	readonly attribute UInt16 DashboardIllumination;
};

[NoInterfaceObject]
interface org.automotive.GeneratedVehicleSoundMode : VehiclePropertyType {

	/**
	* \brief MUST return Sound Mode: 0 = Normal, 1 = Quiet, 2 = Sportive
	**/
	readonly attribute UInt16 GeneratedVehicleSoundMode;
};

};

